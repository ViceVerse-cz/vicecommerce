#!/bin/bash
UNAMEOUT="$(uname -s)"
ROOTPATH=$(dirname $(dirname $(readlink -f "$0")))

# Verify operating system is supported...
case "${UNAMEOUT}" in
    Linux*)             MACHINE=linux;;
    Darwin*)            MACHINE=mac;;
    *)                  MACHINE="UNKNOWN"
esac

if [ "$MACHINE" == "UNKNOWN" ]; then
    echo "Unsupported operating system [$(uname -s)]. Only supports macOS, Linux, and Windows (WSL2)." >&2
    exit 1
fi

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        YELLOW="$(tput setaf 3)"
        GREEN="$(tput setaf 2)"
        NC="$(tput sgr0)"
    fi
fi

function display_help {
    echo
    echo "FuelStack Commandline Interface"
    echo
    echo "${YELLOW}Commands:${NC}"
    echo "  ${GREEN}stack build [package]${NC}      Build application container image"
    echo "  ${GREEN}stack publish [package]${NC}    Publish the container image to registry"
    echo "  ${GREEN}stack up${NC}                   Start the development server"
    echo "  ${GREEN}stack down${NC}                 Stop the development server"
    echo "  ${GREEN}stack info${NC}                 Print the Docker information"
    echo
    echo "${YELLOW}Help command:${NC}"
    echo "  ${GREEN}stack [help, --help, -h]${NC}   Print the commandline help"
    echo
    echo "Unknown commands and arguments will be ignored."
    echo
    exit 0
}

# Define Docker Compose command prefix...
if [ -x "$(command -v docker-compose)" ]; then
    DOCKER_COMPOSE=(docker-compose)
else
    DOCKER_COMPOSE=(docker compose)
fi

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Load the variables file for builder...
[[ -f ${ROOTPATH}/.env ]] && source ${ROOTPATH}/.env > /dev/null 2>&1

# Define environment variables...
export PACKAGE_NAME=${PACKAGE_NAME:-'fuelstack'}
export PACKAGE_VERSION=${PACKAGE_VERSION:-'1.0.0'}

export DOCKER_BUILDKIT=1
export DOCKER_SCAN_SUGGEST=false
export REGISTRY_URL=${REGISTRY_URL:-'docker.io'}
export REGISTRY_USERNAME=${REGISTRY_USERNAME}
export REGISTRY_TOKEN=${REGISTRY_TOKEN}

# Determines if the registry is Docker Hub...
if [ "$REGISTRY_URL" == "docker.io" ] || [ "$REGISTRY_URL" == "registry.hub.docker.com" ]; then
    CONTAINER_NAME="${REGISTRY_USERNAME}/${PACKAGE_NAME}"
else
    CONTAINER_NAME="${REGISTRY_URL}/${REGISTRY_USERNAME}/${PACKAGE_NAME}"
fi

# Check is user already loggedin to the registry...
is_registry_logged_in() {
  cat ${HOME}/.docker/config.json | jq -r --arg url "${REGISTRY_URL}" '.auths | has($url)'
}

authenticate_registry() {
    if [[ "$(is_registry_logged_in)" == "false" ]]; then
        echo $REGISTRY_TOKEN | docker login $REGISTRY_URL -u$REGISTRY_USERNAME --password-stdin
    fi
}

# Warning if command fail...
function something_wrong {
    echo "${BOLD}Something went wrong.${NC}" >&2
    exit 1
}

EXEC="yes"

if [ -z "$SKIP_CHECK" ]; then
    # Ensure that Docker is running...
    if ! docker info > /dev/null 2>&1; then
        echo "${BOLD}Docker is not running.${NC}" >&2
        exit 1
    fi
fi

# Update the package version information in package.json files...
# declare -a arr=( $( ls -1p ${ROOTPATH}/apps | grep / | sed 's/^\(.*\)/\1/') )
# echo -e "Updating package version to ${PACKAGE_VERSION}"
# for i in "${arr[@]}"; do
#     [[ ! -d "${ROOTPATH}/apps/${i}" ]] && echo -e "${GREEN}Package $i not found${NC}\n" && EXEC="no" && exit 1
#    (cd ${ROOTPATH}/apps/${i} && jq '.version = "'${PACKAGE_VERSION}'"' package.json > tmp.$$.json && mv tmp.$$.json package.json)
# done
# (jq '.version = "'${PACKAGE_VERSION}'"' package.json > tmp.$$.json && mv tmp.$$.json package.json)
# echo ${PACKAGE_VERSION} > ${ROOTPATH}/version.txt

ARGS=()

# Get docker information...
if [ "$1" == "info" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        docker version
    else
        something_wrong
    fi

# Build the container...
elif [ "$1" == "build" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        while [ -n "$1" ]; do # while loop starts
            case "$1" in
            --scope)
                param="$2"
                [[ ! -f "${ROOTPATH}/apps/${param}/Dockerfile" ]] && echo "${GREEN}Package $param not found${NC}" && exit 1
                echo -e "\nBuilding container image for ${param}..."
                IMAGE_NAME="${CONTAINER_NAME}-${param}"
                docker build \
                    -t ${IMAGE_NAME}:latest \
                    -t ${IMAGE_NAME}:${PACKAGE_VERSION} \
                    . -f ${ROOTPATH}/apps/${param}/Dockerfile

                IMAGE_SIZE=$(docker images ${IMAGE_NAME}:latest --format "{{.Size}}")
                echo -e "\nContainer ${IMAGE_NAME} has been created, image size: ${IMAGE_SIZE}\n"
                docker images ${IMAGE_NAME}
                echo
                shift
                ;;
            --single)
                echo -e "${GREEN}\nBuilding single container image...${NC}\n"
                docker build -t ${PACKAGE_NAME}:latest -t ${PACKAGE_NAME}:${PACKAGE_VERSION} . -f ${ROOTPATH}/Dockerfile
                IMAGE_SIZE=$(docker images ${PACKAGE_NAME}:latest --format "{{.Size}}")
                echo -e "${GREEN}\nContainer ${PACKAGE_NAME} has been created, image size: ${IMAGE_SIZE}\n${NC}"
                docker images ${PACKAGE_NAME}
                echo
                shift
                ;;
            *) echo -e "${GREEN}\nPackage ${param} not found!${NC}\n" ;;
            esac
            shift
        done
    else
        something_wrong
    fi

# Publish container image to registry...
elif [ "$1" == "publish" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        authenticate_registry
        while [ -n "$1" ]; do # while loop starts
            case "$1" in
            --scope)
                param="$2"
                [[ ! -d "${ROOTPATH}/apps/${param}" ]] && echo "${GREEN}Package $param not found${NC}" && exit 1
                IMAGE_NAME="${CONTAINER_NAME}-${param}"
                IMAGE_SIZE=$(docker images ${IMAGE_NAME}:latest --format "{{.Size}}")
                echo -e "\n${GREEN}Publishing ${IMAGE_NAME} (${IMAGE_SIZE}) to registry...${NC}"
                echo && docker image push ${IMAGE_NAME}:latest
                echo && docker image push ${IMAGE_NAME}:${PACKAGE_VERSION}
                echo
                shift
                ;;
            --single)
                IMAGE_SIZE=$(docker images ${CONTAINER_NAME}:latest --format "{{.Size}}")
                echo -e "\n${GREEN}Publishing ${CONTAINER_NAME} (${IMAGE_SIZE}) to registry...${NC}"
                echo && docker image push ${CONTAINER_NAME}:latest
                echo && docker image push ${CONTAINER_NAME}:${PACKAGE_VERSION}
                echo
                shift
                ;;
            *) echo -e "${GREEN}\nPackage ${param} not found!${NC}\n" ;;
            esac
            shift
        done
    else
        something_wrong
    fi

# Start development server...
elif [ "$1" == "up" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        "${DOCKER_COMPOSE[@]}" -f docker-compose.yml up -d
    else
        something_wrong
    fi

# Stop development server...
elif [ "$1" == "down" ]; then
    shift 1
    if [ "$EXEC" == "yes" ]; then
        "${DOCKER_COMPOSE[@]}" -f docker-compose.yml down
    else
        something_wrong
    fi

# Pass unknown commands to the "docker" binary...
else
    ARGS+=("$@")
    echo "Command \`${ARGS[@]}\` not found!"
fi

# Run Docker Compose with the defined arguments...
# "${DOCKER_COMPOSE[@]}" "${ARGS[@]}"